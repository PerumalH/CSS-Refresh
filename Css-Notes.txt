What is CSS?
make a web page look good - style the page.

History:
1996 Version 1 - css 1
1998 version 2 - css 2
In Development - css 3 - split up into independent Modules


Basics Of CSS :-

1. How to Add CSS to Html
2. Setting up CSS Rules
3. Selectors, Properties, Values 
4. Conflicting Styles


Three Different Way:

inline Style - inside the tag
internal style - inside the html page Inbetween head section - using Selector
External Style - use the css file to style the web, for connect the page. we use link element in html page.

Selector:-

1. Element Tag Selector
2. Class Selector -we can reuse the class selector to another tag, also add multiple classes by space between -.
3. Universal Selector - * - rarely use this one.
4. IDs - one id to one specific element, we don't use same Id for other Element - #
5. Attributes - set equal style to all elements with attribues - [Attribute Name]

cascading style sheet - multiple rules can apply to the same Element.
Specificity - resolve conflict arising from multiple Rules
*** low to high priority.

1. tag and ::pseudo-element selector
2. class :pseudo-class and [attribute] selector
3. #id selector
4. Inline Styles

inheritance - element inherit some style from parent element(Low Specificity)
Combinator :- Combine multiple Selector.

1. Adjacent Sibling - h2 + p {}
  direct sibling -> second comes after h2 tag 
  *immediate following

2. general sibling - h2 ~ p {}
 The general sibling selector (~) selects all elements 
 that are next siblings of a specified element.

3. child - div > p{}
  direct child of first element.

4. descendant - div p{}
  all p tags would apply, inside of the div.


selector, properties, value: predefine,color,size,function

Complete MDN CSS Reference (don't learn this by heart!): https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

Do you prefer reading? Find written CSS docs on MDN: https://developer.mozilla.org/en-US/docs/Web/CSS

Common CSS Properties Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference

CSS Combinators: https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors

More details on CSS Specifity: https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity

CSS Box Model- every element work as a box.

Margin Collapsing - bigger element margin wins - use either margin-top and margin-botton. to rid of that.

When working with margins, you can get unexpected results. 

Why are two adjacent elements sharing one margin even though each element has its own one?
Why does a parent element (e.g. <section>  as in the videos) suddenly take on the margin of the child element (e.g. <h1> )?
It's always related to margin collapsing. You can dive deeply into it with the help of the following awesome article: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

There, three base cases are described:

Adjacent siblings which both have margins
A parent which holds one or more child elements where the first and/ or last (or the only) child has margins
An element without content, padding, border and height
Let's explore these cases:

1. Adjacent Siblings

In this case, the first element might have a margin of 10px  (on all sides let's say) and the second one has 5px  (or 20px  - the values don't matter).
CSS will collapse the margins and only add the bigger one between the elements. 
So if we got margins of 10px  and 5px , a 10px  margin would be added between the elements?

2. A parent with children that have a margin
To be precise, the first and/ or last or the only child has to have margins (top and/ or bottom). 
In that case, the parent elements margin will collapse with the child element(s)' margins. 
Again, the bigger margin wins and will be applied to the parent element.
If the parent element has padding, inline content (other than the child elements) or a border, 
this behavior should not occur, the child margin will instead be added to the content of the wrapping parent element.

3. An empty element with margins
This case probably doesn't occur that often but if you got an element with no content, 
no padding, no border and no height, then the top and bottom margin will be merged into one single margin. Again, the bigger one wins.

Shorthand Properties:- combined value of multiple properties in a single property

Height & width - it's include only the size of the content ,
 not border,margin,padding
if we add the b,m,p. it'will override the page.
to rid of that, we have to use box-sizing


pseudo classes and pseudo Element

grouping rule - using the comma(,)

Useful Resources & Links
CSS Box Model: https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Box_model

box-sizing : https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing

More on height & width: https://www.w3schools.com/css/css_dimension.asp

The display  Property: https://developer.mozilla.org/en-US/docs/Web/CSS/display

Pseudo Classes on the MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

Dive deeper into Pseudo Elements: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

More on Css Class:

1. multiple classes on one Element
2. same-element combination  - chain selector
3. css class - re-usable, most usable type selector, 
allow you to mark and name things for styling purpose only
4. css Id - only used once per page, use if available anyways,
also got non-css meaning (e.g on page link)

!important - overwrites specifity and all other Selectors

DON'T USE !important

:not() psuedo classes - 
Browser support - can i use.com

Useful Resources & Links
A discussion on "classes vs IDs": https://stackoverflow.com/questions/12889362/difference-between-id-and-class-in-css-and-when-to-use-it
When is using !important  okay? => https://css-tricks.com/when-using-important-is-the-right-choice/
The :not()  pseudo class: https://developer.mozilla.org/en-US/docs/Web/CSS/:not
Can I Use: https://caniuse.com/


to make a line like a card template, 
we have to display the every single container as inline-block.

float positing - using clear to fix the space Specificity

Useful Resources & Links
More on float: https://developer.mozilla.org/en-US/docs/Web/CSS/float

Position:

to change the position of the element

Why Positioning will improve our Website

Position Elements:

position default value by brower - as a static.

absolute, relative, fixed, sticky.

we can the position using the top, left, bottom, right in the document flow.

viewport - browser window.
this is all about positing context.
we can add the position property to the block and inline element.
using the top, left, bottom, right - we can place any where in the viewport.

using the fixed in Positioning properties - we can make non-movable one.



z index - by default 0. its help to position the element.
if one element cover the whole page, and hide the other content. 
we use z-index to backward the element make visible which are behind it. 
Ex - if we set bg image but it front of all content, we have to make z-index -1. 
to make that image set into background.

stack order of element. we could change the order of it, using this.

Absolute - follow the ancester - with use of relative.

relative - it will move from the place where it positioning.

overflow hidden - hidden the content which is beyond of the context. 

sticky - it'll fixed if it reach a particular distance 

stacking Context - parent - parent [childs] - parent

position - property, documentflow, moving elements[top,left], 

position define anchor point, -  fixed is viewport, 
another element is absolute, element itself relative,
sticky - viewport, another element.

z-index - larger value ele is position the ele top of the other element.

stacking context.

Positioning theory: https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning
More about the "position" property: https://developer.mozilla.org/en-US/docs/Web/CSS/position
The z-index: https://developer.mozilla.org/en-US/docs/Web/CSS/z-index
The Stacking Context: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
The "sticky" value and current browser support: https://caniuse.com/#search=sticky



background & images.

bg-bg: left, top; - it adjust the x and y axis of the image.

if we use %, crop the top and left. !important.
using center value - make it as center.


Background property:

bg-i - img, bg-c - color, bg-p - set initial position, relative to bg pos.
bg - s - set size of bg img, bg - rep - how bg img repeat.

bg-origin - set bg pos area. bg-attch - set scrolling behavior.

bg- clip,color - not to img.

origin - related to box. by default padding-box.
clip - that bg content override the origin of it. 
attach: scroll, fixed, local.

styling image:

img h,w doesn't handle h,w which we provide to it. when its into the element.
% value, doesn't work on surrounding container.

it only work when its surrounder by inline block in display.

linear-gradient: in the background image.

first attribute - for direction, for degree, 
after this, we can use many attribute for colors.
after this, we can use transparent
after this, we can use rgba for 
we can seperate the space for particular color, using  % for color.

radial-gradient: bg as a lips shape.

first attribute- we can change the shape of it, and where this should present, position.

Ex - circle 20px at 20% 50%

using Multiple Background:

only one color should use, gradient treat as image.

for background - separate list has own set of background.


Filter: 

its help to change the visible appears of the content.

Summary - background property, shorthand - override all properties, 
Gradient, Multiple background, img - more difficult to style.
filter.

The background  Property: https://developer.mozilla.org/en-US/docs/Web/CSS/background
Styling Images: https://www.w3schools.com/css/css3_images.asp
Filters: https://developer.mozilla.org/en-US/docs/Web/CSS/filter
Styling SVG: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_and_CSS


dimensions, Sizes, & units.

units - px, %,{ rem , em, }font size, vh, vw 

which properties - to use, 

font-size, padding, border, margin, 
height, width, top, bottom.
left, right.

how is size calculated.

Absolute lengths - mostly ignore user settings. - px
ViewPort Lengths - adjust to current viewPort. - vh
Font-relative Lengths - Adjust to default font size. - rem, em
Percentage - % - Special Case.

how is the percentage work on box.

3 rule 

1. position - fixed - viewPort
2. position - absolute -{ Ancestor/content}+padding.
3.Position - static,relative - block level element.


rem - root font size.
em - parent font size.

rem need to learn. 16px - 1 rem.

vh, vw.


which unit should i choose?

padding, margin - rem
border - px
width,height - %,vh,vw
top,bottom - %
font-size - rem (em -> children only)

margin : auto to center the block element with exclipt width.

Dive Deeper into Selected Topics

Font size properties and values: https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
Viewport units and browser support: https://caniuse.com/#search=vh

work with js;

accessing style properties, add & remove css classes with classlist.

JavaScript Basics: https://academind.com/learn/javascript
JavaScript CSS Styles: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style
classList : https://developer.mozilla.org/en-US/docs/Web/API/Element/classList

hardward vs software.

responsive design

viewPort - adjust site to device viewport, no design changes
media Queries - change design depending on size, and defined by us}


View port - user-scalable="yes",maximum-scale

think media query, as if conditional.
try to make a website mobile ver,
we can multiple mq.

css code run top to bottom

finding the breaking point.

min-width - help for, to change into desktop ver 

we can work with logical operator, orientation, [, separation also work]

Dive Deeper into Selected Topics

Absolute lengths on W3.org: https://www.w3.org/TR/css-values-3/#absolute-lengths

More about device sizes: https://bjango.com/articles/min-device-pixel-ratio/

Media queries theory: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries

Applying media queries: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries

advance attribute selector

~ - lang~="en-us"
| = lang|="en" kind of prefix
^ = href^="#" prefix 
$ = href$=".de" suffix
* = src*="cdn" at least this value present in src. if use i at last of attritube selectore,
it is case insens


styling inputs, validation feedback with valid, invalid

working with text and font.

generic families - serif, sanif, cursive, monospace, fantasy[not used]

font families - times new roman, helvetica, brush script, courier new.
ff is formed from gf. inside the gf there are multiple ff.

default behavior - is browser chose the standard font
css - generic family- chose generic family -browser select the ff based gf.
css - font family - user's computer - may not have the font in there computer.
* web fonts
* retrieved fro server.

different font has different width. 

locally stored font: to check that css font stack
web fonts: through google fonts - we can import the style in the css page.

if we import the font, we have to specify the style then only
we could add that import the custom font.

@font-face {
  font-family: name;
  src : url("ttf") format("truetype")
}
after the download the file from the googlefont, we use this format.
we have to add the fw between difference font-face

woff - web open font format.2
eot - embedded

font properties:
size, variant, stretch - it supported by browser.,
letter-space,white-space, line height,

line height depends on font family we are using.
text-decoration, we can add two value for this. what line , and style of line and color

text-shadow - offset two,blur, color.

font shorthand - order 

style, variant, weight, size/line-height,  family

font shorthand for system font
menu,status bar

font-display: for loading performing

block p - box contain the text but not visible
fallback - 
swap p - infinite customfont

option.
auto.

Dive Deeper into Selected Topics

Web Safe Fonts: https://www.cssfontstack.com/
Google Fonts: https://fonts.google.com/
The "line-height" property: https://developer.mozilla.org/en-US/docs/Web/CSS/line-height

Working with flexbox;

flex container , flex items

get rid of calc - using flexbox.

understanding flexbox:

property - display : flex 

parent - child.
flex container -flex items

property

parent - flex-flow, align-item, justify-content, align-content, align-item
child - order, flex, align-self

display: flex - change the size of the child by default.
inline-flex - dont change the size of the it.

flex-wrap - it adopt the height,width - wrap, reverse,
flex direction - row, column - reverse

main Axis - cross axis

starting point 

left to right - main - row
top left to bottom - cross

right to left - main - row reverse
top right to left - cross

column : pqwq

top left to botton  - main
left to right - cross

bottom left to top = main
bottom left to right = cross


flew-flow for shorthand to direction, wrap.

align items - align the item based on cross axis.
justify-content - align the item based on main axis.
align content - align the item based on cross axis

need to play with flex.

z-index will the change the order, even if we dont use position.

Flex items:

order - change the item of the order by using number value, 1,-1,2,
by default 0.
align-self - change the position of the single element. -on cross axis
4

flex-grow - it will occupy the remaining space are available - by using number value 1
by default 0.
flex- shrink - 
flex - basis - it override the height & widht based on main axix depend on direction

flex - grow, shrink, basis - shorthand

Dive Deeper into Selected Topics

Flexbox and browser compatibility: https://caniuse.com/#search=flexbox
The theory behind flexbox: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox
The flex container: https://developer.mozilla.org/en-US/docs/Glossary/Flex_Container 

the Grid.

we divide the part as row and column.
which element should position where.

only direct children, part of the grid.

we can change template of grid as row and column.
we can positioning the grid item into two cells more than that.
in row and column.

we define the layout - a container
we define the position - a item

template-row and template-column - for grid container. for layout.
column start and end, row start and end - for grid items. to position by line number

auto - to fill remain space,

repeat - we can use this share the same size and no of grid - we actually need.

minmax - we can use this for apply min and max size for particular row and column.

element can overlap the cells.

span - helps to occupy the cell by default 1.
if span 3 , it occupy 3 cells from 1st cell 

we could name the row as many as we need.

we could use that name, to use for position instead of number.
not for span.

shorthand - for grid-row-column-start-end- ;
grid-row : startvalue/endValue
for combine - grid area : rowstart/ column start/ rowend /column end

Gaps - 
grid-gap: row column.

grid-template-area:

we can create a template by cells - like 2 row, 3 column. 6 cell.
named the cells and use that in grid-area property to map into particular cell.

auto generating grid areas - to use -start and -end 

fit-content() - to obtain the content in the particular space, even its big or small. it change the size for that space

its for grid container:

justify-item: for grid. - stretch is default.
align-item: - stretch is default.
align-content: y axix.
justify-conten: x axix.

its for grid item:
align-self:
justify-self:

to positioning the item in the grid. we can override the stretch for particular cell.

Actually, grid create row for their child.
we can change that by add column-template or auto-flow
and also style the row and column by auto-row or column - [use dense] - changing the order.

exclipt grid by user define.

dynamic grid - to use auto-fill , auto-fit. - use the available space in the best possible way.


one-dimensions - flex box
multiple-dimensions - grid box.

chose based on the need.

A really great article series on the CSS Grid: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout
A complete guide to CSS Grid: https://css-tricks.com/snippets/css/complete-guide-grid/

transform: -> translate

translate  move based on how it present.

rotateZ(). - by default z axis.
origin by default center.

skew - for angle  and scale - increase the size 

rotate - x, y, z.

perspective -
backface-visibility - 
 
CSS Transforms: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms
3D Transforms: https://desandro.github.io/3dtransforms/


Transition - which property, initial delay, how long should it take?,
timing Function: "start fast, end slow"

transition: which property should i watch - duration - timing funtion - delay

timing funtion: linear, easin, out.

animation:

using keyframe - named this - using in animation 

animation - keyframe name, delay, duration, 8 

The animation  property is used as see in the previous video:

animation: NAME DURATION DELAY TIMING-FUNCTION ITERATION DIRECTION FILL-MODE PLAY-STATE; 

Example:

animation: wiggle 200ms 1s ease-out 8 alternate forwards running; 

The transition  property is used as see in the previous video:

transition: WHAT DURATION DELAY TIMING-FUNCTION; 

Example:

transition: opacity 200ms 1s ease-out; 

CSS Transitions: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions
CSS Animations: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations
List of "transitionable" Properties: https://www.w3.org/TR/css-transitions-1/#animatable-properties

css variable:

using root pseudo selector;

--name-name :

when we declare in var() , in the property value.

vendor prefixesn - autoprefixer

@support - some feature just arent implemented (yet) in some browser.

it check like if state.

polyfills

it is a js package, which enable certain css features in browers.
which would not support

eliminate cross-browser inconsistencies.

browser use different defaults.

use reset-library - normalise.css

choosing class names correctly

do - use kebab-case, name by feature
dont - snake-Case, name by style

block element modifier (BEM)

a uniform and consistent way fo naming your css classes.

. block __ element -- modifier

. menu__item--hightlighted

vanilla vs css frameworks

component frameworks, utility framework

v css - full control, no unnecessary code, name clss as you like.
c f - radip Development, follow best practice, no need to be an expert.
u f - faster development, follow best practice, no expert knowledge needed.

v css - can't - build everything from scratch, danger of bad code.
c f - can't - no or little control , unnecessary overhead code, all website look the same.
u f - can't - little control, unnecessary overhead code. 

CSS Modules & Working Groups: https://www.w3.org/TR/tr-groups-all#tr_Cascading_Style_Sheets__CSS__Working_Group

CSS Variables: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables

Vendor Prefixes: https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix

Which Vendor Prefixes should you use? => http://shouldiprefix.com/

@supports: https://developer.mozilla.org/en-US/docs/Web/CSS/%40supports

BEM in Detail: http://getbem.com/introduction/

An introduction to Bootstrap 4: https://academind.com/learn/css/bootstrap-4-tutorial/

CSS Polyfills: https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills

Sass - superset of CSS - css on steroid

SCSS and SASS is same - syntax different.
 
Syntactically awesome style sheet.

does not run in the Browser, - it extends CSS - during Development.
[nested css]
need complied to css before production.

SASS Feature:

Nested rule - shorthand the code
helper functions - color brighter
inheritance - dont need to repeat code
mixins -  reuse snippets 
partials - split the code
conditions & loops
varibles - set the value of color, hex code.

for sass - we don't need ;,{}.
for scss - we can use this.

sass - instead, we use indentation for which selector belongs to which property in above level.

nested rule:

previous, we use Combinator selector. for scss - instead we use nested.
sass main.scss main.css - sass sass-file output-file
sass --watch main.scss:main.css - to watch realtime style -while change of scss file code.

nested property:

for flex based properties - everything followed by flex.
in that case - we use the flex as property name and continue by curly braces insid 
that we can add the flex based properties.

understanding varibles:

like css varible - we use here varible - using $ in the start of the name.

// - comment line in scss
lists & maps:

list - more than one value in the variable

map - (key: value) - to access the value of map - map-get(variblename, key)

build-in function:
there are more build-in function.

Ex-lighten(color, shades by percentage)

Arithmetics:

we can addition, sub, mul, div

better import & partial:

partial - we using this to store variables in the seperate file, start with _.

import - we can use multiple scss files, and import in the main scss.
then we compile it, and stored as single css file.

advance media:

we use Media_Queries in the nested way, under the specific selector.

inheritance:

we can separately create a class which is same style for others.

and using @extend with class-name to add in the needed one, inside the {}

mixins:

reusable function - own function.

@mixins - for initial, @content - to the content into the function , 
@include- for call the function inside the selector.

we can create function , also with passing argument.


& - it helps to append the selectors, psuedo code.

Dive deeper into Sass: https://sass-lang.com/guide