What is CSS?
make a web page look good - style the page.

History:
1996 Version 1 - css 1
1998 version 2 - css 2
In Development - css 3 - split up into independent Modules


Basics Of CSS :-

1. How to Add CSS to Html
2. Setting up CSS Rules
3. Selectors, Properties, Values 
4. Conflicting Styles


Three Different Way:

inline Style - inside the tag
internal style - inside the html page Inbetween head section - using Selector
External Style - use the css file to style the web, for connect the page. we use link element in html page.

Selector:-

1. Element Tag Selector
2. Class Selector -we can reuse the class selector to another tag, also add multiple classes by space between -.
3. Universal Selector - * - rarely use this one.
4. IDs - one id to one specific element, we don't use same Id for other Element - #
5. Attributes - set equal style to all elements with attribues - [Attribute Name]

cascading style sheet - multiple rules can apply to the same Element.
Specificity - resolve conflict arising from multiple Rules
*** low to high priority.

1. tag and ::pseudo-element selector
2. class :pseudo-class and [attribute] selector
3. #id selector
4. Inline Styles

inheritance - element inherit some style from parent element(Low Specificity)
Combinator :- Combine multiple Selector.

1. Adjacent Sibling - h2 + p {}
  direct sibling -> second comes after h2 tag 
  *immediate following

2. general sibling - h2 ~ p {}
 The general sibling selector (~) selects all elements 
 that are next siblings of a specified element.

3. child - div > p{}
  direct child of first element.

4. descendant - div p{}
  all p tags would apply, inside of the div.


selector, properties, value: predefine,color,size,function

Complete MDN CSS Reference (don't learn this by heart!): https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

Do you prefer reading? Find written CSS docs on MDN: https://developer.mozilla.org/en-US/docs/Web/CSS

Common CSS Properties Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference

CSS Combinators: https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors

More details on CSS Specifity: https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity

CSS Box Model- every element work as a box.

Margin Collapsing - bigger element margin wins - use either margin-top and margin-botton. to rid of that.

When working with margins, you can get unexpected results. 

Why are two adjacent elements sharing one margin even though each element has its own one?
Why does a parent element (e.g. <section>  as in the videos) suddenly take on the margin of the child element (e.g. <h1> )?
It's always related to margin collapsing. You can dive deeply into it with the help of the following awesome article: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

There, three base cases are described:

Adjacent siblings which both have margins
A parent which holds one or more child elements where the first and/ or last (or the only) child has margins
An element without content, padding, border and height
Let's explore these cases:

1. Adjacent Siblings

In this case, the first element might have a margin of 10px  (on all sides let's say) and the second one has 5px  (or 20px  - the values don't matter).
CSS will collapse the margins and only add the bigger one between the elements. 
So if we got margins of 10px  and 5px , a 10px  margin would be added between the elements?

2. A parent with children that have a margin
To be precise, the first and/ or last or the only child has to have margins (top and/ or bottom). 
In that case, the parent elements margin will collapse with the child element(s)' margins. 
Again, the bigger margin wins and will be applied to the parent element.
If the parent element has padding, inline content (other than the child elements) or a border, 
this behavior should not occur, the child margin will instead be added to the content of the wrapping parent element.

3. An empty element with margins
This case probably doesn't occur that often but if you got an element with no content, 
no padding, no border and no height, then the top and bottom margin will be merged into one single margin. Again, the bigger one wins.

Shorthand Properties:- combined value of multiple properties in a single property

Height & width - it's include only the size of the content ,
 not border,margin,padding
if we add the b,m,p. it'will override the page.
to rid of that, we have to use box-sizing


pseudo classes and pseudo Element

grouping rule - using the comma(,)

Useful Resources & Links
CSS Box Model: https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Box_model

box-sizing : https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing

More on height & width: https://www.w3schools.com/css/css_dimension.asp

The display  Property: https://developer.mozilla.org/en-US/docs/Web/CSS/display

Pseudo Classes on the MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

Dive deeper into Pseudo Elements: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

More on Css Class:

1. multiple classes on one Element
2. same-element combination  - chain selector
3. css class - re-usable, most usable type selector, 
allow you to mark and name things for styling purpose only
4. css Id - only used once per page, use if available anyways,
also got non-css meaning (e.g on page link)

!important - overwrites specifity and all other Selectors

DON'T USE !important

:not() psuedo classes - 
Browser support - can i use.com

Useful Resources & Links
A discussion on "classes vs IDs": https://stackoverflow.com/questions/12889362/difference-between-id-and-class-in-css-and-when-to-use-it
When is using !important  okay? => https://css-tricks.com/when-using-important-is-the-right-choice/
The :not()  pseudo class: https://developer.mozilla.org/en-US/docs/Web/CSS/:not
Can I Use: https://caniuse.com/


to make a line like a card template, 
we have to display the every single container as inline-block.

float positing - using clear to fix the space Specificity

Useful Resources & Links
More on float: https://developer.mozilla.org/en-US/docs/Web/CSS/float

Position:

to change the position of the element

Why Positioning will improve our Website

Position Elements:

position default value by brower - as a static.

absolute, relative, fixed, sticky.

we can the position using the top, left, bottom, right in the document flow.

viewport - browser window.
this is all about positing context.
we can add the position property to the block and inline element.
using the top, left, bottom, right - we can place any where in the viewport.

using the fixed in Positioning properties - we can make non-movable one.



z index - by default 0. its help to position the element.
if one element cover the whole page, and hide the other content. 
we use z-index to backward the element make visible which are behind it. 
Ex - if we set bg image but it front of all content, we have to make z-index -1. 
to make that image set into background.

stack order of element. we could change the order of it, using this.

Absolute - follow the ancester - with use of relative.

relative - it will move from the place where it positioning.

overflow hidden - hidden the content which is beyond of the context. 

sticky - it'll fixed if it reach a particular distance 

stacking Context - parent - parent [childs] - parent

position - property, documentflow, moving elements[top,left], 

position define anchor point, -  fixed is viewport, 
another element is absolute, element itself relative,
sticky - viewport, another element.

z-index - larger value ele is position the ele top of the other element.

stacking context.

Positioning theory: https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning
More about the "position" property: https://developer.mozilla.org/en-US/docs/Web/CSS/position
The z-index: https://developer.mozilla.org/en-US/docs/Web/CSS/z-index
The Stacking Context: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
The "sticky" value and current browser support: https://caniuse.com/#search=sticky



background & images.

bg-bg: left, top; - it adjust the x and y axis of the image.

if we use %, crop the top and left. !important.
using center value - make it as center.


Background property:

bg-i - img, bg-c - color, bg-p - set initial position, relative to bg pos.
bg - s - set size of bg img, bg - rep - how bg img repeat.

bg-origin - set bg pos area. bg-attch - set scrolling behavior.

bg- clip,color - not to img.

origin - related to box. by default padding-box.
clip - that bg content override the origin of it. 
attach: scroll, fixed, local.

styling image:

img h,w doesn't handle h,w which we provide to it. when its into the element.
% value, doesn't work on surrounding container.

it only work when its surrounder by inline block in display.

linear-gradient: in the background image.

first attribute - for direction, for degree, 
after this, we can use many attribute for colors.
after this, we can use transparent
after this, we can use rgba for 
we can seperate the space for particular color, using  % for color.

radial-gradient: bg as a lips shape.

first attribute- we can change the shape of it, and where this should present, position.

Ex - circle 20px at 20% 50%

using Multiple Background:

only one color should use, gradient treat as image.

for background - separate list has own set of background.


Filter: 

its help to change the visible appears of the content.

Summary - background property, shorthand - override all properties, 
Gradient, Multiple background, img - more difficult to style.
filter.

The background  Property: https://developer.mozilla.org/en-US/docs/Web/CSS/background
Styling Images: https://www.w3schools.com/css/css3_images.asp
Filters: https://developer.mozilla.org/en-US/docs/Web/CSS/filter
Styling SVG: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_and_CSS


dimensions, Sizes, & units.

units - px, %,{ rem , em, }font size, vh, vw 

which properties - to use, 

font-size, padding, border, margin, 
height, width, top, bottom.
left, right.

how is size calculated.

Absolute lengths - mostly ignore user settings. - px
ViewPort Lengths - adjust to current viewPort. - vh
Font-relative Lengths - Adjust to default font size. - rem, em
Percentage - % - Special Case.

how is the percentage work on box.

3 rule 

1. position - fixed - viewPort
2. position - absolute -{ Ancestor/content}+padding.
3.Position - static,relative - block level element.


rem - root font size.
em - parent font size.

rem need to learn. 16px - 1 rem.

vh, vw.


which unit should i choose?

padding, margin - rem
border - px
width,height - %,vh,vw
top,bottom - %
font-size - rem (em -> children only)

margin : auto to center the block element with exclipt width.

Dive Deeper into Selected Topics

Font size properties and values: https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
Viewport units and browser support: https://caniuse.com/#search=vh

